import javafx.collections.ObservableList;
import javafx.scene.control.ComboBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuItem;

/**
 * this class class handles contextMenu
 */
public class MenuContent implements ContextMenuState {
    EventHandler events;
    Menu menu;
    MenuItem play;

    public MenuContent(EventHandler events) {

        this.events = events;
    }

    /**
     * creates the content for the contextMenu
     *
     * @param comboBox takes in a comboBox to imitate existing playlist
     */
    @Override
    public void createContent(ComboBox comboBox) {

        Menu menu = new Menu("Add To Playlist");

        ObservableList<String> items = comboBox.getItems();

        for (String choices : items) {
            if (items.isEmpty()) {
                break;
            }

            String selected = comboBox.getSelectionModel().getSelectedItem().toString();
            if (choices != "Library" && choices != selected) {

                MenuItem newMenuItem = new MenuItem(choices.toString());
                newMenuItem.setOnAction(event -> {
                    this.events.contextMenuHandler(newMenuItem.getText()); //calls method in handler
                });

                menu.getItems().add(newMenuItem);
            }
        }

        MenuItem play = new MenuItem("Play Song");
        play.setOnAction(event -> {
            this.events.contextMenuHandler(play.getText()); //calls method in handler
        });

        this.menu = menu;
        this.play = play;
    }

    /**
     * updates the context menu using  values generated by the createContent
     *
     * @param contextMenu takes in a context menu to attach content to
     */
    @Override
    public void updateContextMenu(ContextMenu contextMenu) {
        //System.out.println(menu.getText());
        new Updates().updateContextMenu(contextMenu, this.menu, this.play);
    }
}
